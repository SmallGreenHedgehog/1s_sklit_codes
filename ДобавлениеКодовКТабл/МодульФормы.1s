Перем РасширФормы;

Процедура Sleep(Задержка) 
   Shell=СоздатьОбъект("WScript.Shell");	
   Shell.Run("ping -n 1 127.255.255.255 -w "+СокрЛП(Задержка*1000),0,-1);
   Shell=ПолучитьПустоеЗначение(); 
КонецПроцедуры

Процедура ВывестиТаблицу(Табл, МаксСтрок=0, Отступ=0, Разделит="		")
	Перем ВывестиСтрок; 
	Перем СтрКол, К, ТипТабл, ТекТипТабл;
	
	ТекТипТабл=ТипЗначенияСтр(Табл);
	ТипТабл=?(ТекТипТабл="ТаблицаЗначений",1,?(ТекТипТабл="ИндексированнаяТаблица",2,0));
	
	Если ТипТабл>0 Тогда 
		СтрКол="";  
		Для К=1 По Отступ Цикл
			СтрКол=СтрКол+Разделит;
		КонецЦикла;
		Для К=1 По Табл.КоличествоКолонок() Цикл
			СтрКол=СтрКол+СокрЛП(?(ТипТабл=1,Табл.ПолучитьПараметрыКолонки(К),Табл.ИмяКолонки(К)))+"; ";
		КонецЦикла;
		Сообщить(СтрКол);
		
		ВывестиСтрок=?(МаксСтрок>0,Мин(МаксСтрок,Табл.КоличествоСтрок()),Табл.КоличествоСтрок());
		Для Стр=1 по ВывестиСтрок Цикл
			СтрТекст="";
			Для К=1 По Отступ Цикл
				СтрТекст=СтрТекст+Разделит;
			КонецЦикла;
			Для Кол=1 По Табл.КоличествоКолонок() Цикл
				СтрТекст=СтрТекст+СокрЛП(Табл.ПолучитьЗначение(Стр,Кол))+";";			 
			КонецЦикла;
			СтрТекст=Лев(СтрТекст,СтрДлина(СтрТекст)-1);
			Сообщить(СтрТекст); 	
			
			Если ТипТабл=2 Тогда
				Если (Табл.ИмяКолонки(Кол-1)="тзПотомки") Тогда
					ВывестиТаблицу(Табл.ПолучитьЗначение(Стр,Кол-1),,Отступ+1);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;  
	Иначе
		Сообщить("Вывод таблицы не возможен. Переданные данные не являются таблицей. ("+ТекТипТабл+")");
	КонецЕсли;
КонецПроцедуры

Функция LeftSlashStrip(Str, Nom) //Отрезает строку начиная с определенного вхождения символа "\", отсчет слева
	Перем К, Сим, РезСтр;
	К=0;
	Длин=СтрДлина(Str);	
	Сим=Длин;
	Пока Сим>0 Цикл
		Сим=Сим-1;
		Если Сред(Str,Сим,1)="\" Тогда
			К=К+1;
			Если К=Nom Тогда
				Прервать;
			КонецЕсли;
		КонецЕсли;       		
	КонецЦикла;
	РезСтр=Лев(Str, Сим-1);
	
	Возврат РезСтр;
КонецФункции

Функция RightSlashStrip(Str, Nom) //Отрезает строку начиная с определенного вхождения символа "\", отсчет справа
	Перем К, Сим, РезСтр;
	К=0;
	Длин=СтрДлина(Str);	
	Сим=Длин;
	Пока Сим>0 Цикл
		Сим=Сим-1;
		Если Сред(Str,Сим,1)="\" Тогда
			К=К+1;
			Если К=Nom Тогда
				Прервать;
			КонецЕсли;
		КонецЕсли;       		
	КонецЦикла;
	РезСтр=Прав(Str, Длин-Сим);
	Возврат РезСтр;
КонецФункции

Функция СкопироватьФайл(ИмяФайла, Назначение)
	Перем Успех, УспехВремПереим,ВремФайл;
	
	Успех=0;
	Если ФС.СуществуетФайл(ИмяФайла)=1 Тогда
		ВремФайл=LeftSlashStrip(ИмяФайла,1)+"\tmp";
		
		УспехВремПереим=1;
		Попытка
			ФС.ПереименоватьФайл(ИмяФайла, ВремФайл,1);			
		Исключение
			УспехВремПереим=0;
			Сообщить(ОписаниеОшибки());
		КонецПопытки;
		
		Если УспехВремПереим=1 Тогда
			Успех=1;
			Попытка
				ФС.КопироватьФайл(ВремФайл, Назначение,0);			
			Исключение
				Успех=0;
				Сообщить(ОписаниеОшибки());
			КонецПопытки;
		КонецЕсли;		
		ФС.ПереименоватьФайл(ВремФайл,ИмяФайла,1);			
	Иначе
		Сообщить("Файл """+СокрЛП(ИмяФайла)+""" не найден.");
	КонецЕсли;
	
	Возврат Успех;
КонецФункции // ПереместитьФайл

Функция ВыборФайла(Путь, ИмяРеквНаФорме="", ТекстВыбора="Выберите файл:", РаботаСОтносПутями=0, Расширение="*", РежимВыбора=0, ИмяФайлаПоУмолч="", Таймаут=30)
	Перем Кат, Фай;
	Перем Результат;
	
	Кат="";
	Фай="";   
	
	Результат=ФС.ВыбратьФайл(РежимВыбора,Фай,Кат,ТекстВыбора,"(*."+Расширение+")|*."+Расширение,,Таймаут);
	
	Если Результат=1 Тогда
		Если ИмяФайлаПоУмолч="" Тогда
			ИмяФайлаПоУмолч="def"+?(Расширение<>"*","."+Расширение,".txt");
		КонецЕсли;		
		
		Путь=Кат+?(ПустаяСтрока(СокрЛП(Фай))=1,ИмяФайлаПоУмолч,Фай);
		//Путь=?(РаботаСОтносПутями=1,ПреобразованиеОтноситПутей(Кат+?(ПустаяСтрока(СокрЛП(Фай))=1, ИмяФайлаПоУмолч,Фай)),Кат+?(ПустаяСтрока(СокрЛП(Фай))=1, ИмяФайлаПоУмолч,Фай));
		
		//Если ПустаяСтрока(ИмяРеквНаФорме)=0 Тогда
		//	Шаблон("[Форма."+ИмяРеквНаФорме+".Заголовок("""+Путь+""")]");
		//	Форма.Обновить();
		//КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
КонецФункции // ВыборФайла
	
Процедура НачатьПоискНеНайденныхПозиций(ТабНеНайдПоз)
	Перем Путь, Обработка;
	Перем КонтекстФормы; 
	Перем КолНеНайдСтрокПоз;         
	Перем СписНеактПоз;
	Перем СпрКонтр;
	                  
	РасположениеФайла(Путь,);
	
	КолНеНайдСтрокПоз=ТабНеНайдПоз.КоличествоСтрок();
	Если КолНеНайдСтрокПоз>0 Тогда     
		Если Вопрос("Внимание! Позиции в "+СокрЛП(КолНеНайдСтрокПоз)+" стр. были не найдены. Выполнить поиск соответствий?",4,10)=6 Тогда
			//***********************************************************
			//Заполняем список параметров
			КонтекстФормы=СоздатьОбъект("СписокЗначений");
			КонтекстФормы.ДобавитьЗначение("Контрагенты","ИмяСправочника");
			КонтекстФормы.ДобавитьЗначение(ТабНеНайдПоз,"ТаблицаНеНайденныхПозиций");
			КонтекстФормы.ДобавитьЗначение(3,"НомерКолонкиРеквизита"); 
			КонтекстФормы.ДобавитьЗначение("Наименование","ИмяРеквизита");
			КонтекстФормы.ДобавитьЗначение(50,"МинПроцентСоответствия");
			КонтекстФормы.ДобавитьЗначение(85,"ДостатПроцентСоответствия");			
			СписНеактПоз=СоздатьОбъект("СписокЗначений");
			Если ПустоеЗначение(ГрНеактКонтр)=0 Тогда
				СписНеактПоз.ДобавитьЗначение(ГрНеактКонтр);		
			КонецЕсли;			
			КонтекстФормы.ДобавитьЗначение(СписНеактПоз, "НеактуальныеПозиции");
			СписНеактПоз=ПолучитьПустоеЗначение();     
			//***********************************************************
			
			Обработка=Путь+"ADD_BINDINGS.ert";
			
			Если ФС.СуществуетФайл(Обработка)=1 Тогда 
				ОткрытьФорму("Отчет",КонтекстФормы,Обработка);  				
			Иначе
				Предупреждение("Ошибка! Организовать поиск не найденных позиций заявки не удалось. Обратитесь к специалисту.",10);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры  

Функция ПолучитьТабКодов()
	Перем База, Запрос,  ТекстДБФЗапроса, ТабДБФЗапроса;	
	Перем НачМил;
	Перем ИмяКаталога, ИмяФайла;
	
	
	//Сначала переместим файл во временный каталог
	РасположениеФайла(ИмяКаталога,);
	ИмяКаталога=ИмяКаталога+"tmpdbftables_"+ИмяПользователя();
	
	Если ФС.СуществуетФайл(ИмяКаталога)=0 Тогда
		ФС.СоздатьКаталог(ИмяКаталога);
	КонецЕсли;
	

	СкопироватьФайл(ТабЗаполнения, ИмяКаталога+"\Zap.dbf");
	
	НачМил=_GetPerformanceCounter();
	
	ТабДБФЗапроса=СоздатьОбъект("ТаблицаЗначений");;
	База = СоздатьОбъект("OLEDBData");
	Рез=База.Connect("Provider=VFPOLEDB.1;Data Source="+ИмяКаталога+";Mode=ReadWrite;Collating Sequence=MACHINE");
	Если Рез=1 Тогда
		Запрос = База.СоздатьКоманду();
		
		НачМил=_GetPerformanceCounter();		
		ТекстДБФЗапроса = "
		|SELECT
		|	*
		|FROM
		|	Zap
		|";
		
		ТабДБФЗапроса = Запрос.ВыполнитьИнструкцию(ТекстДБФЗапроса);
		//Сообщить("Выполнено за "+СокрЛП(_GetPerformanceCounter()-НачМил)+" миллисекунд");
	КонецЕсли;
	
	База.Close();
	База=ПолучитьПустоеЗначение();	
	
	//ВывестиТаблицу(ТабДБФЗапроса, 100);
	
	Возврат ТабДБФЗапроса;
КонецФункции // ПолучитьТабКодов

Процедура ЗаполнитьКоды()
	Если Фс.СуществуетФайл(ТабЗаполнения)=1 Тогда
		Если ПустаяСтрока(СокрЛП(ТабКодовТочек))=0 Тогда
			Если СокрЛП(ТабКодовТочек)<>СокрЛП(ТабЗаполнения) Тогда
				ТабКодов=ПолучитьТабКодов();		
				НачатьПоискНеНайденныхПозиций(ТабКодов);
			Иначе
				Предупреждение("Файл источник и результирующий файл должны отличаться!");
			КонецЕсли;			
		Иначе
			Предупреждение("Необходимо указать результирующий файл.");
		КонецЕсли;
	Иначе
		Предупреждение("Файл базы данных найден не был.",30);
	КонецЕсли;
КонецПроцедуры // ЗаполнитьКоды

Процедура ВыборТаблицыЗаполнения()
	ВыборФайла(ТабЗаполнения,"ТабЗаполнения","Выберите путь к файлу связей:",1,"dbf",1);
КонецПроцедуры // ВыборТаблицыЗаполнения

Процедура ОчисткаПутиКТабЗаполнения()
	ТабЗаполнения="";
КонецПроцедуры // ОчисткаПутиКТабЗаполнения

Процедура ВыборТаблицыКодовТочек()
	ВыборФайла(ТабКодовТочек,"ТабКодовТочек","Выберите путь к результирующему файлу точек:",1,"dbf",0);
КонецПроцедуры // ВыборТаблицыЗаполнения

Процедура ОчисткаПутиКТабКодовТочек()
	ТабКодовТочек="";
КонецПроцедуры // ОчисткаПутиКТабЗаполнения

Функция ПолучитьРезультатыПоиска(ТаблицаНайденныхКодов, ФайлТаблицы)
	Перем ПутьКБазеПередачиТаблиц;
	Перем Результат;
	Перем МетаДата;
	Перем Путь, ИмяКаталога;
	Перем База, Запрос,  ТекстДБФЗапроса, ТабДБФЗапроса;	
	Перем НачМил;
	Перем ИмяФайла;	
	Перем ТекПопыт, НеобходКолПопыт, Успех; 
	
	ФайлТаблицы="";
	
	Результат=0;
	
	РасположениеФайла(Путь,);
	ИмяКаталога=Путь+"tmpdbftables_"+ИмяПользователя();
	ПутьКБазеПередачиТаблиц=Путь+"exptabbase_"+СокрЛП(ИмяПользователя())+".dbf";	
	
	Если ФС.СуществуетФайл(ПутьКБазеПередачиТаблиц)=1 Тогда
		
		ФС.ПереименоватьФайл(Путь+"exptabbase_"+СокрЛП(ИмяПользователя())+".dbf", ИмяКаталога+"\tmpcon.dbf",1);

		База = СоздатьОбъект("OLEDBData");
		Рез=База.Connect("Provider=VFPOLEDB.1;Data Source="+ИмяКаталога+";Mode=ReadWrite;Collating Sequence=MACHINE");
		Если Рез=1 Тогда
			Запрос = База.СоздатьКоманду();
			Если ФС.СуществуетФайл(ИмяКаталога+"\tmpCodeS.DBF")=1 Тогда
				ФС.УдалитьФайл(ИмяКаталога+"\tmpCodeS.DBF");
			КонецЕсли;
			
			НеобходКолПопыт=5;
			ТекПопыт=0;
			Успех=0;        
			
			Пока (ТекПопыт<НеобходКолПопыт) и (Успех=0) Цикл
				ТекПопыт=ТекПопыт+1;
				Успех=1;
				Попытка
					Запрос.ВыполнитьИнструкцию("CREATE TABLE tmpCodeS (Id_Cl Numeric (4,0), Id_GRP Numeric (4,0), KOD Character (20,0))");
				Исключение
					Успех=0; 
					Сообщить(ОписаниеОшибки());
					Sleep(1);			
				КонецПопытки;
			КонецЦикла; 
			
			Если Успех=1 Тогда
				НачМил=_GetPerformanceCounter();		
				ТекстДБФЗапроса = "
				|INSERT INTO tmpCodeS (Id_Cl, Id_GRP, KOD)
				|SELECT
				|	Zap.Id_Cl,
				|	Zap.Id_GRP,
				|	tmpcon.Code
				|FROM
				|	Zap
				|INNER JOIN
				|	tmpcon on tmpcon.NameAdr=Zap.NameAdr
				|GROUP by
				|	Zap.Id_Cl,
				|	Zap.Id_GRP,
				|	tmpcon.Code
				|";			
				
				
				НеобходКолПопыт=5;
				ТекПопыт=0;
				Успех=0;        
				
				Пока (ТекПопыт<НеобходКолПопыт) и (Успех=0) Цикл
					ТекПопыт=ТекПопыт+1;
					Успех=1;
					Попытка
						Запрос.ВыполнитьИнструкцию(ТекстДБФЗапроса);
					Исключение
						Успех=0; 
						Сообщить(ОписаниеОшибки());
						Sleep(1);			
					КонецПопытки;
				КонецЦикла; 
			КонецЕсли;
			Запрос=ПолучитьПустоеЗначение();
		КонецЕсли;
		
		База.Close();
		Рез=ПолучитьПустоеЗначение();
		База=ПолучитьПустоеЗначение();	
		
		Если Успех=1 Тогда
			//Сообщить("Выполнено за "+СокрЛП(_GetPerformanceCounter()-НачМил)+" миллисекунд");
			ФайлТаблицы=ИмяКаталога+"\tmpCodeS.DBF";
			Если ФС.СуществуетФайл(ФайлТаблицы)=1 Тогда
				Результат=1;
			КонецЕсли;
		КонецЕсли;			

		//ВывестиТаблицу(ТабДБФЗапроса);		
	КонецЕсли;
		
	Возврат Результат;
КонецФункции

Процедура ПроверкаВозвратаПоиска() 
	Перем ФайлФлага;        
	Перем ДействитСоздать; 
	Перем ПоискЗавершен;
	Перем Путь;
	Перем ТаблицаНайденныхКодов;
	Перем ФайлТаблицы;
	
	РасположениеФайла(Путь,);
	
	ПоискЗавершен=0;	
	ФайлФлага=Путь+"flag_"+СокрЛП(ИмяПользователя())+".txt";
	Если ФС.СуществуетФайл(ФайлФлага)=1 Тогда	
		//Получить таблицу найденных позиций 		
		ФС.УдалитьФайл(ФайлФлага);		
		ПоискЗавершен=1
	КонецЕсли;
	
	Если ПоискЗавершен=1 Тогда
		Если ПолучитьРезультатыПоиска(ТаблицаНайденныхКодов,ФайлТаблицы)=1 Тогда
			ФС.ПереименоватьФайл(ФайлТаблицы,ТабКодовТочек,1);
			Если ФС.СуществуетФайл(ТабКодовТочек)=1 Тогда
				Сообщить("Таблица кодов ("+СокрЛП(ТабКодовТочек)+") успешно создана.");
			КонецЕсли;
		КонецЕсли;				
	КонецЕсли;
КонецПроцедуры

Процедура ПослеСозданияФормы()
	Перем ИмяКаталога;
	РасположениеФайла(ИмяКаталога,);
	ИмяКаталога=ИмяКаталога+"tmpdbftables_"+ИмяПользователя();
	
	РасширФормы=СоздатьОбъект("РасширениеФормы");
	РасширФормы.УстановитьФорму(Форма);
	РасширФормы.ОбработкаОжидания("ПроверкаВозвратаПоиска",500);
КонецПроцедуры

	

