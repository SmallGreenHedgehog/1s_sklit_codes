Перем ПереданнаяТаблица, ТаблицаСоответствий, НечетПоиск, ОбщийКеш;
Перем Ведомость, Путь, ИмСправочника, РеквизитПоиска;
Перем ФлагНеобхПередачиТаблицы;
Перем СтрокНачВывода;

Процедура Sleep(Задержка) 
   Shell=СоздатьОбъект("WScript.Shell");	
   Shell.Run("ping -n 1 127.255.255.255 -w "+СокрЛП(Задержка*1000),0,-1);
   Shell=ПолучитьПустоеЗначение(); 
КонецПроцедуры

Процедура ВывестиТаблицу(Табл, МаксСтрок=0, Отступ=0, Разделит="		")
	Перем ВывестиСтрок; 
	Перем СтрКол, К, ТипТабл;  
	
	ТипТабл=?(ТипЗначенияСтр(Табл)="ТаблицаЗначений",1,?(ТипЗначенияСтр(Табл)="ИндексированнаяТаблица",2,0));
	
	Если ТипТабл>0 Тогда 
		СтрКол="";  
		Для К=1 По Отступ Цикл
			СтрКол=СтрКол+Разделит;
		КонецЦикла;
		Для К=1 По Табл.КоличествоКолонок() Цикл
			СтрКол=СтрКол+СокрЛП(?(ТипТабл=1,Табл.ПолучитьПараметрыКолонки(К),Табл.ИмяКолонки(К)))+"; ";
		КонецЦикла;
		Сообщить(СтрКол);
		
		ВывестиСтрок=?(МаксСтрок>0,Мин(МаксСтрок,Табл.КоличествоСтрок()),Табл.КоличествоСтрок());
		Для Стр=1 по ВывестиСтрок Цикл
			СтрТекст="";
			Для К=1 По Отступ Цикл
				СтрТекст=СтрТекст+Разделит;
			КонецЦикла;
			Для Кол=1 По Табл.КоличествоКолонок() Цикл
				СтрТекст=СтрТекст+СокрЛП(Табл.ПолучитьЗначение(Стр,Кол))+";";			 
			КонецЦикла;
			СтрТекст=Лев(СтрТекст,СтрДлина(СтрТекст)-1);
			Сообщить(СтрТекст); 	
			
			Если ТипТабл=2 Тогда
				Если (Табл.ИмяКолонки(Кол-1)="тзПотомки") Тогда
					ВывестиТаблицу(Табл.ПолучитьЗначение(Стр,Кол-1),,Отступ+1);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;  
	Иначе
		Сообщить("Вывод таблицы не возможен. Переданные данные не являются таблицей.");
	КонецЕсли;
КонецПроцедуры  

Функция ЗагруженностьКомпоненты(СтрокаОбъекта)
	Перем Загруж, Объект;
	
	Загруж=1;
	Попытка  
		Объект=СоздатьОбъект(СтрокаОбъекта);		
	Исключение
		Загруж=0;
	КонецПопытки;  
	Объект=ПолучитьПустоеЗначение();
	
	Возврат Загруж;
КонецФункции    

Процедура РаскраситьЯчейку(Адрес, Адекватность) 
	Ведомость.Область(Адрес).ЦветФона(?(Адекватность=5,15634355,?(Адекватность=4,65280,?(Адекватность=3,13482047,?(Адекватность=2,12648447,255)))));
КонецПроцедуры

Функция ПрочитатьПараметрыЗапуска(ТаблицаПоиска, СписНеактуальных, МинПроцСоответств, ДостатПроцСоответств)
	Перем Успех; 
	Перем СписПараметров; 
	Перем НомерКолокиПоиска; 
	
	Успех=0;
	
	СписПараметров=Форма.Параметр;
	Если ТипЗначенияСтр(СписПараметров)="СписокЗначений" Тогда
		//ПереданнаяТаблица=СоздатьОбъект("ТаблицаЗначений"); //Для скриптов 
		//ТаблицаПоиска=СоздатьОбъект("ТаблицаЗначений");
		ПереданнаяТаблица=СписПараметров.Получить("ТаблицаНеНайденныхПозиций"); 
		НомерКолокиПоиска=СписПараметров.Получить("НомерКолонкиРеквизита"); 
		ИмСправочника=СписПараметров.Получить("ИмяСправочника");
		РеквизитПоиска=СписПараметров.Получить("ИмяРеквизита");   
		МинПроцСоответств=СписПараметров.Получить("МинПроцентСоответствия");
		ДостатПроцСоответств=СписПараметров.Получить("ДостатПроцентСоответствия");
		                                                            
		СписНеактуальных=СоздатьОбъект("СписокЗначений");
		Если ТипЗначенияСтр(СписПараметров.Получить("НеактуальныеПозиции"))="СписокЗначений" Тогда
			СписПараметров.Получить("НеактуальныеПозиции").Выгрузить(СписНеактуальных);
		КонецЕсли;
		ПереданнаяТаблица.Выгрузить(ТаблицаПоиска);
		
		ТаблицаПоиска.Свернуть(НомерКолокиПоиска,);  
		Если ТаблицаПоиска.КоличествоСтрок()>0 Тогда
			Успех=1;
		КонецЕсли;
	КонецЕсли;	
	          
	Возврат Успех;
КонецФункции    

Функция Инициализация()     
	Перем Успех;
	
	Успех=1;
	Если ЗагруженностьКомпоненты("AddIn.StrMatchExtension")=0 Тогда
		Попытка
			ЗагрузитьВнешнююКомпоненту("StrMatch.dll");
		Исключение          
			Успех=0;
			Предупреждение("Ошибка! Загрузить внешнюю компоненту ""StrMatch.dll"" не удалось! Обратитесь к специалисту.");
		КонецПопытки;	
	КонецЕсли; 
	
	Если ЗагруженностьКомпоненты("SQLiteBase")=0 Тогда
		Попытка
			ЗагрузитьВнешнююКомпоненту("1sqlite.dll");
		Исключение
			Успех=0;
			Предупреждение("Ошибка! Загрузить внешнюю компоненту ""1sqlite.dll"" не удалось! Обратитесь к специалисту.");
		КонецПопытки;    
	КонецЕсли;
	
	Если ЗагруженностьКомпоненты("MetaDataWork")=0 Тогда
		Попытка
			ЗагрузитьВнешнююКомпоненту("1cpp.dll");
		Исключение
			Успех=0;
			Предупреждение("Ошибка! Загрузить внешнюю компоненту ""1cpp.dll"" не удалось! Обратитесь к специалисту.");
		КонецПопытки;    
	КонецЕсли;
	

	Если Успех=1 Тогда 
		Попытка
			НечетПоиск = СоздатьОбъект("AddIn.StrMatchExtension");
		Исключение      
			Успех=0;
			Сообщить("Ошибка создания объекта ""НечетПоиск"". Проверьте наличие компоненты ""StrMatch"", или обратитесь к специалисту.");
		КонецПопытки; 
		
		Если Успех=1 Тогда     
			СтрокНачВывода=3;
			
			РасположениеФайла(Путь,); 
			ТаблицаСоответствий=СоздатьОбъект("ТаблицаЗначений");
			ТаблицаСоответствий.ВставитьКолонку("Позиция");
			ТаблицаСоответствий.ВставитьКолонку("Соответствие");
			
			ОбщийКеш=1;
			
			НечетПоиск.СоздатьКэш(ОбщийКеш);
			
			ВыводитьПохожих=20;       
			
			ФлагНеобхПередачиТаблицы=0;
		КонецЕсли;
	КонецЕсли;

	Возврат Успех;
КонецФункции 

Функция ЗаполнитьКэш(СписокНеактГруп)
	Перем Результат;
	Перем ЗначРекв;         
	Перем ТекстПрямЗапроса, ТабПрямЗапроса;
	Перем К;
	Перем ВыкинутьНеакт;   
	Перем ЕстьГруппы;

	Состояние("Готовим список для поиска");	
	
	НечетПоиск.ОчиститьКэш(ОбщийКеш);	
	         
	Результат=1;
	Попытка
		БазаSQLite = СоздатьОбъект("SQLiteBase");
	Исключение      
		Результат=0;
		Сообщить("Ошибка создания объекта ""БазаSQLite"". Проверьте наличие компоненты ""1sqlite.dll"", или обратитесь к специалисту.");
	КонецПопытки; 
	
	Если Результат=1 Тогда         
		ВыкинутьНеакт=0;
		                      
		БазаSQLite.Открыть(":memory:");
		ЗапросSQLite = БазаSQLite.НовыйЗапрос();
		ЗапросSQLite.ВыполнятьВТранзакции = 0;
		ЗапросSQLite.ВыполнитьЗапрос("PRAGMA journal_mode = WAL");
		//ЗапросSQLite.Отладка(1);
		                                                      
		Если СписокНеактГруп.РазмерСписка()>0 Тогда
			ВыкинутьНеакт=1;
			БазаSQLite.УложитьОбъекты(СписокНеактГруп,"vt_НеактПоз",0,?(ИмСправочника="НазванияТМЦуПоставщиков","Номенклатура",ИмСправочника));	
		КонецЕсли; 
		
		ЕстьГруппы=?(Метаданные.Справочник(ИмСправочника).КоличествоУровней>1,1,0);
		
		ТекстПрямЗапроса="
		|SELECT	
		|	Справ.ID as [ОбъектСпр $Справочник."+ИмСправочника+"],
		|	Справ.ID as [ТекстID $Строка],		
		|	Справ."+?(РеквизитПоиска="Наименование","DESCR",?(РеквизитПоиска="Код","CODE",РеквизитПоиска))+" as ЗначениеРеквизита
		|FROM	
		|	[Справочник."+ИмСправочника+"] as Справ 
		|WHERE
		|"
		+?(ВыкинутьНеакт=1,"	Справ."+?(ИмСправочника="НазванияТМЦуПоставщиков","ParentExt","ID")+" NOT IN (SELECT Val FROM vt_НеактПоз)"+?(ЕстьГруппы=1," and ",""),"")
		+?(ЕстьГруппы=1,"(Справ.IsFolder<>1)","")
		+"
		|Group by Справ.ID
		|"; 
		
		//ТабПрямЗапроса=СоздатьОбъект("ТаблицаЗначений"); //для работы скриптов
		Состояние("Выбираем список актуальных позиций");    
		Результат=1;
		Попытка
			//ЗапросSQLite.Подготовить(ТекстПрямЗапроса);
			ТабПрямЗапроса=ЗапросSQLite.ВыполнитьЗапрос(ТекстПрямЗапроса);
		Исключение
			Сообщить(ОписаниеОшибки());
			Результат=0;
		КонецПопытки;
		
		Если Результат=1 Тогда     
			КолСтр=ТабПрямЗапроса.КоличествоСтрок();
			Результат=?(КолСтр>0,1,0);
			
			//Сообщить(КолСтр);
			
			Если Результат=1 Тогда		
				Для К=1 По КолСтр Цикл
					ЗначРекв=ТабПрямЗапроса.ПолучитьЗначение(К,"ЗначениеРеквизита");
					ТекстКэш=ТабПрямЗапроса.ПолучитьЗначение(К,"ТекстID");
					
					//Сообщить(СокрЛП(ТекстКэш)+" | "+СокрЛП(ЗначРекв));
					НечетПоиск.ДобавитьВКэш(ОбщийКеш,ЗначРекв,,ТекстКэш);			
				КонецЦикла;  
			КонецЕсли;
		Иначе			
			Сообщить("Ошибка выполнения запроса заполнения кэша! Обратитесь к специалисту.");
		КонецЕсли; 
		
		ЗапросSQLite=ПолучитьПустоеЗначение();
		БазаSQLite.Закрыть();
	КонецЕсли;                 
	
	Возврат Результат;
КонецФункции       

Функция ПолучитьТаблицуПохожихПозиций(Позиция, МинПроцСоотв, ДостатПроцСоответств)
	Перем ТабПохожихПозиций;
	Перем К, КоэфПохож;
	Перем ВыводитьПохожих; 
	Перем МетаДата;  
	Перем ТекСоответствие, ЗначениеРеквизита;
	Перем КоэфСамопохож;
	Перем ПроцФонетПохож;
	Перем ПроцТочнСовпад;
	Перем Адекватность;
	
	ВыводитьПохожих=20; 
	ПроцТочнСовпад=98;
                              
	МетаДата=СоздатьОбъект("MetaDataWork");
	
	ТабПохожихПозиций=СоздатьОбъект("ТаблицаЗначений");
	ТабПохожихПозиций.ВставитьКолонку("Соответствие");
	ТабПохожихПозиций.ВставитьКолонку("ТекстРеквизитСоответствия");

	//Адекватность: 4 - точно совпадает (больше ПроцТочнСовпад, либо выбрана вручную), 
	//				3 - похожа, 
	//				2 - более менее похожа (в допустимом диапазоне), 
	//				1 - не выбрано  
	//				5 - была изменена вручную
	ТабПохожихПозиций.ВставитьКолонку("Адекватность"); 
	
	
	ТабПохожихПозиций.НоваяСтрока();
	ТабПохожихПозиций.Соответствие = 0;
	ТабПохожихПозиций.ТекстРеквизитСоответствия = "Не выбрано";
	ТабПохожихПозиций.Адекватность = 0;
	ТабПохожихПозиций.НоваяСтрока();
	ТабПохожихПозиций.Соответствие = "Вручную";
	ТабПохожихПозиций.ТекстРеквизитСоответствия = "Выбрать вручную";
	ТабПохожихПозиций.Адекватность = 0;
	
	//Сравниваем Кэш
	Состояние("Выбираем наиболее похожие позиции"); 
	НечетПоиск.СравнитьСКэшем(ОбщийКеш,Позиция,ВыводитьПохожих);
	
	К=1;	    
	ПроцФонетПохож=100;
	Пока Не(К>ВыводитьПохожих) и Не(МинПроцСоотв>ПроцФонетПохож)  Цикл
		ТекстИД="";  
		
		КоэфПохож=0;
		НечетПоиск.ПолучитьИзПодбора(К,ТекстИД,КоэфПохож);   
		
		ТекСоответствие=МетаДата.ЗначениеИзСтрокиБД("Справочник."+ИмСправочника,ТекстИД);
		ЗначениеРеквизита=Шаблон("[ТекСоответствие."+РеквизитПоиска+"]"); 
		
		КоэфСамопохож=НечетПоиск.Сравнить(ЗначениеРеквизита, ЗначениеРеквизита);  
		ПроцФонетПохож=Окр(100*КоэфПохож/КоэфСамопохож,0,1);
		Адекватность=?(ПроцФонетПохож>ПроцТочнСовпад,4,?(Не(ПроцФонетПохож<ДостатПроцСоответств),3,?(Не(ПроцФонетПохож<МинПроцСоотв),2,1)));
		
		Если Не(МинПроцСоотв>ПроцФонетПохож) Тогда
			//Сообщить(СокрЛП(К)+" | "+СокрЛП(ТекстИД)+" | "+СокрЛП(ТекСоответствие)+" | "+СокрЛП(КоэфПохож)+" | "+СокрЛП(ЗначениеРеквизита));
			
			ТабПохожихПозиций.НоваяСтрока();
			ТабПохожихПозиций.Соответствие = ТекСоответствие;
			ТабПохожихПозиций.ТекстРеквизитСоответствия = СокрЛП(ЗначениеРеквизита);
			ТабПохожихПозиций.Адекватность = Адекватность;
		КонецЕсли;
		
		К=К+1;
	КонецЦикла;    
	
	Возврат ТабПохожихПозиций;
КонецФункции 

Процедура ЗаполнитьТаблицуСоответствий(ТаблПоиска, МинПроцСоотв, ДостатПроцСоответств)
	Перем К, КолСтр, НомПохожСтроки;
	Перем Позиция, Соответствие, ТекстРеквизитСоответствия, ТабСоответствийДляВыбора, Адекватность;
	
	ТаблицаСоответствий.УдалитьСтроки();
	ТабСоответствийДляВыбора=СоздатьОбъект("ТаблицаЗначений");
	
	//ТаблПоиска=СоздатьОбъект("ТаблицаЗначений"); //Для скриптов
	КолСтр=ТаблПоиска.КоличествоСтрок();
	
	Ведомость=Таблица;
	Ведомость.ИсходнаяТаблица("Поиск соответствий");
	
	Ведомость.ВывестиСекцию("Шапка");
	
	Для К=1 По КолСтр Цикл
		Позиция=ТаблПоиска.ПолучитьЗначение(К,1);
		ПолучитьТаблицуПохожихПозиций(Позиция, МинПроцСоотв, ДостатПроцСоответств).Выгрузить(ТабСоответствийДляВыбора);
		
		НомПохожСтроки=?(ТабСоответствийДляВыбора.КоличествоСтрок()>2,3,1);
		
		Соответствие=ТабСоответствийДляВыбора.ПолучитьЗначение(НомПохожСтроки,"Соответствие");
		ТекстРеквизитСоответствия=ТабСоответствийДляВыбора.ПолучитьЗначение(НомПохожСтроки,"ТекстРеквизитСоответствия");
		Адекватность=ТабСоответствийДляВыбора.ПолучитьЗначение(НомПохожСтроки,"Адекватность");
		
		ТаблицаСоответствий.НоваяСтрока();
		ТаблицаСоответствий.Позиция = Позиция;
		ТаблицаСоответствий.Соответствие = Соответствие;
		
		Ведомость.ВывестиСекцию("Строка");		
		РаскраситьЯчейку("R"+СокрЛП(СтрокНачВывода+К)+"C2",Адекватность);
	КонецЦикла; 
	Ведомость.ВывестиСекцию("Подвал");
	Ведомость.ТолькоПросмотр(1);  
	Ведомость.Опции(,,СтрокНачВывода);
	Ведомость.Показать(,,1);	
КонецПроцедуры

Процедура ПриОткрытии()
	Перем ТаблПоиска, СписНеактПоз, МинПроцентСоответствия, ДостатПроцентСоответствия;
	
	Если Инициализация()=1 Тогда
		Если ПрочитатьПараметрыЗапуска(ТаблПоиска, СписНеактПоз, МинПроцентСоответствия, ДостатПроцентСоответствия)=1 Тогда 
			Если ЗаполнитьКэш(СписНеактПоз)=1 Тогда
				ЗаполнитьТаблицуСоответствий(ТаблПоиска, МинПроцентСоответствия, ДостатПроцентСоответствия);
			КонецЕсли;		
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Функция ВыборПохожейПозицииВручную(Элемент)
	Перем ВремИмСправ;
	Перем Справочник;
	Перем СпрВладелец;
	Перем Результат;
	
	Справочник=СоздатьОбъект("Справочник.Номенклатура");
	
	Результат=0;
	ВремИмСправ=ИмСправочника;
	                                 
	Справочник=СоздатьОбъект("Справочник."+СокрЛП(ВремИмСправ)); 

	//Пока жесткий выбор из справочника названий ТМЦ - далее перепилим с учетом владельца
	Если ИмСправочника="НазванияТМЦуПоставщиков" Тогда
		ВремИмСправ="Номенклатура"; 
		
		СпрВладелец=СоздатьОбъект("Справочник."+СокрЛП(ВремИмСправ)); 
		СпрВладелец.ВыборГруппы(0);
		Если СпрВладелец.Выбрать("Выбор соответствия вручную:","ФормаСписка")=1 Тогда
			Справочник.ИспользоватьВладельца(СпрВладелец.ТекущийЭлемент());
			Если Справочник.ВыбратьЭлементы()=1 Тогда
				Результат=Справочник.ПолучитьЭлемент();
			КонецЕсли;       
		КонецЕсли;
	КонецЕсли;
	Если Результат=0 Тогда
		Справочник.ВыборГруппы(0);
		Результат=Справочник.Выбрать("Выбор соответствия вручную:","ФормаСписка");
	КонецЕсли;    
	
	Если Результат=1 Тогда
		Элемент=Справочник.ТекущийЭлемент();
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

Процедура ВыборПохожейПозиции(ТаблВыбора, Адрес)
	Перем ВнутрСписДляВыбора;
	Перем ВыбранСтрока;
	Перем НомерПозицииВТаблицеСоответствий;
	Перем ПозРаздел;
	Перем СтарСоответствие, ТекСоответствие, ЗначениеРеквизита, Адекватность;
	Перем ОблАктив;
	Перем WShell;
	                 
	ВнутрСписДляВыбора=СоздатьОбъект("СписокЗначений"); 
	
	//ТаблВыбора=СоздатьОбъект("ТаблицаЗначений"); //Для скриптов 
	ТаблВыбора.Выгрузить(ВнутрСписДляВыбора,,,"ТекстРеквизитСоответствия");
	Если ВнутрСписДляВыбора.ВыбратьЗначение(,"Выбор соответствия:",ВыбранСтрока,10,2)=1 Тогда
		
		ПозРаздел=Найти(Адрес,"C");
		НомерПозицииВТаблицеСоответствий=Число(Сред(Адрес,2,ПозРаздел))-СтрокНачВывода; //С учетом шапки
		
		ТекСоответствие=ТаблВыбора.ПолучитьЗначение(ВыбранСтрока,"Соответствие");
		ЗначениеРеквизита=ТаблВыбора.ПолучитьЗначение(ВыбранСтрока,"ТекстРеквизитСоответствия");
		Адекватность=5;  //Выставляем адекватность ручного выбора
		
		Если ВыбранСтрока=3 Тогда
			Адекватность=ТаблВыбора.ПолучитьЗначение(ВыбранСтрока,"Адекватность"); //выбрали строку
		ИначеЕсли ВыбранСтрока=2 Тогда //Ручной подбор 
			Если ВыборПохожейПозицииВручную(ТекСоответствие)=0 Тогда
				Возврат;
			КонецЕсли;
			ЗначениеРеквизита=Шаблон("[ТекСоответствие."+РеквизитПоиска+"]");
		ИначеЕсли ВыбранСтрока=1 Тогда
			Адекватность=0; //При не выбранном значении красим в красный  
		КонецЕсли;
		

		//Сначала проверим не изменился ли выбор
		СтарСоответствие=ТаблицаСоответствий.ПолучитьЗначение(НомерПозицииВТаблицеСоответствий, "Соответствие");
		
		Если СтарСоответствие<>ТекСоответствие Тогда
			Ведомость.Область(Адрес).Текст=ЗначениеРеквизита;			
			ТаблицаСоответствий.УстановитьЗначение(НомерПозицииВТаблицеСоответствий,"Соответствие",ТекСоответствие);
			РаскраситьЯчейку(Адрес,Адекватность);
			Ведомость.Показать(1);
			
			WShell=СоздатьОбъект("WScript.Shell"); 
			WShell.Sendkeys("{Down}");			
			WShell=ПолучитьПустоеЗначение();
		КонецЕсли;
	КонецЕсли;
	ВнутрСписДляВыбора=ПолучитьПустоеЗначение();
КонецПроцедуры

Процедура ДобавлениеПривязок()
	Перем ИндТабПереданная, ИндТабСоответствий;
	Перем Стр, ТекСоответств;
	Перем СпрПривязок;
	Перем Успех; 
	Перем КолДобавлПривязок;
	Перем ТекВладелец;
	Перем ТекПривязка;
	Перем ТекКонтр;
	Перем НеобхДобавлять;
	
	//Данная функция работает с определенным справочником,
	//в дальнейшем необходимо исправление на SQLITE базу           
	//Колонки должны иметь имена "Позиция", "Контрагент"
	
	Если Вопрос("Внимание! Данная операция не обратима. Вы уверены в необходимости продолжения?",4,10)=6 Тогда
		ИндТабПереданная=СоздатьОбъект("ИндексированнаяТаблица");
		ИндТабСоответствий=СоздатьОбъект("ИндексированнаяТаблица");
		
		ИндТабПереданная.Загрузить(ПереданнаяТаблица);
		ИндТабПереданная.Свернуть("Позиция,Контрагент",,);
		ИндТабСоответствий.Загрузить(ТаблицаСоответствий);
		ИндТабСоответствий.ДобавитьИндекс("Позиция","*Позиция");
		
		ИндТабПереданная.ВнутреннееСоединение("Позиция",ИндТабСоответствий,"Позиция","Соответствие");	
		ИндТабПереданная.ДобавитьИндекс("Соответствие", "*Соответствие");
		ИндТабПереданная.УстановитьФильтр(0,0,"Соответствие");
		ИндТабПереданная.УдалитьСтроки("Соответствие");
		ИндТабПереданная.ВыключитьФильтр("Соответствие");
		
		КолДобавлПривязок=ИндТабПереданная.КоличествоСтрок();
		Если КолДобавлПривязок>0 Тогда
			//Теперь добавим привязки
			//ВывестиТаблицу(ИндТабПереданная);
			
			СпрПривязок=СоздатьОбъект("Справочник.НазванияТМЦуПоставщиков");
			НачатьТранзакцию();                
			Сообщить();
			Сообщить("+++++++++++++++++++++++++++++++++++++");
			Сообщить("Добавление привязок");
			Сообщить();
			ИндТабПереданная.ВыбратьСтроки();		
			Пока ИндТабПереданная.ПолучитьСтроку() = 1 Цикл 
				ТекПривязка=ИндТабПереданная.Позиция;
				ТекВладелец=?(ИмСправочника="НазванияТМЦуПоставщиков",ИндТабПереданная.Соответствие.Владелец,ИндТабПереданная.Соответствие);
				ТекКонтр=ИндТабПереданная.Контрагент;
				
				
				СпрПривязок.ИспользоватьВладельца(ТекВладелец);
				НеобхДобавлять=1;
				Если СпрПривязок.НайтиПоНаименованию(ТекПривязка,1,1)=1 Тогда
					Если СпрПривязок.Поставщик=ТекКонтр Тогда
						НеобхДобавлять=1;
					КонецЕсли;  
				КонецЕсли;
				
				Если НеобхДобавлять=1 Тогда
					Сообщить("Добавляем ""привязку"": "+СокрЛП(ТекПривязка)+" в "+СокрЛП(ТекВладелец)+" ("+СокрЛП(ТекКонтр)+")");
					СпрПривязок.Новый();
					//СпрПривязок.Код = ;
					СпрПривязок.Наименование = ТекПривязка;
					//СпрПривязок.Родитель = ;
					СпрПривязок.Поставщик = ТекКонтр;
					СпрПривязок.Записать();  
				Иначе
					Сообщить("""Привязка"" """+СокрЛП(ТекПривязка)+""" для позиции """+СокрЛП(ТекВладелец)+""" ("+СокрЛП(ТекКонтр)+") уже существует","!");
				КонецЕсли;
			КонецЦикла;	
			
			Успех=1;
			Попытка
				ЗафиксироватьТранзакцию();
			Исключение 
				Успех=0;
				Сообщить(ОписаниеОшибки());
				ОтменитьТранзакцию();
			КонецПопытки;   
			
			Если Успех=1 Тогда
				Сообщить("Успешно добавлено ""привязок"":"+СокрЛП(КолДобавлПривязок),".");
			КонецЕсли;
			Сообщить("+++++++++++++++++++++++++++++++++++++"); 
			
			СпрПривязок=ПолучитьПустоеЗначение();		
		КонецЕсли;	
		
		ИндТабПереданная=ПолучитьПустоеЗначение();
		ИндТабСоответствий=ПолучитьПустоеЗначение();
	КонецЕсли;
КонецПроцедуры    

Процедура ПередатьТаблицуСоответствий() 
	Перем ПутьКБазеПередачиТаблиц;  
	Перем ТекПопыт, НеобходКолПопыт, Успех;
	Перем НачСтр, ТекСтр, КолСтр, ТекстДобавленияСтроки;
	Перем ТекСоответствие;
	                              
	ПутьКБазеПередачиТаблиц=Путь+"tmpdbftables_"+ИмяПользователя();
	
	Если ФС.СуществуетФайл(ПутьКБазеПередачиТаблиц)=0 Тогда
		ФС.СоздатьКаталог(ПутьКБазеПередачиТаблиц);
	КонецЕсли;	
	
	ДБФ=СоздатьОбъект("XBase");
	ДБФ.ДобавитьПоле("NameAdr","S",255,0);
	ДБФ.ДобавитьПоле("Code","C",8,0);
	
	ДБФ.СоздатьФайл(ПутьКБазеПередачиТаблиц+"\tmpcon.DBF");
	
	НачСтр=1;
	КолСтр=ТаблицаСоответствий.КоличествоСтрок();
	Для ТекСтр=НачСтр По КолСтр Цикл 
		ТекСоответствие=ТаблицаСоответствий.ПолучитьЗначение(ТекСтр,2);
		Если ТекСоответствие=0 Тогда
			Продолжить;
		КонецЕсли;
		
		ДБФ.Добавить();
		ДБФ.NameAdr=ТаблицаСоответствий.ПолучитьЗначение(ТекСтр,1);
		ДБФ.Code=ТекСоответствие.Код;
		ДБФ.Записать();
	КонецЦикла;
	ДБФ.ЗакрытьФайл();
	ДБФ=ПолучитьПустоеЗначение();
	
	ФС.ПереименоватьФайл(ПутьКБазеПередачиТаблиц+"\tmpcon.DBF", Путь+"exptabbase_"+СокрЛП(ИмяПользователя())+".dbf",1);	
КонецПроцедуры

Процедура ОбработкаЯчейкиТаблицы(Значение,ФлагСтандОбр,ТаблВед,Адрес)
	Если Значение="ДобавитьПривязки" Тогда
		ДобавлениеПривязок();					
	ИначеЕсли Значение="ЗакрытьУчесть" Тогда
		ФлагНеобхПередачиТаблицы=1;
		Форма.Закрыть();                     
	ИначеЕсли Значение="ПростоЗакрыть" Тогда
		Форма.Закрыть();		
	ИначеЕсли ТипЗначенияСтр(Значение)="ТаблицаЗначений" Тогда
		ВыборПохожейПозиции(Значение, Адрес);
	КонецЕсли;
КонецПроцедуры  

Процедура ИнициализацияОбработкиРезультатов()   
	Перем ТекстФлаг;    
	Перем ФайлФлага; 
	
	ФайлФлага=Путь+"flag_"+СокрЛП(ИмяПользователя())+".txt";
	ТекстФлаг=СоздатьОбъект("Текст");
	ТекстФлаг.Записать(ФайлФлага);
КонецПроцедуры

Процедура ПриЗакрытии()
	
	Если ФлагНеобхПередачиТаблицы=1 Тогда
		ПередатьТаблицуСоответствий();
	Иначе
		Если Вопрос("Таблица соответствий не будет учтена в обработке. 
		|Для передачи таблицы в обработку необходимо использовать кнопку ""Закрыть с учетом таблицы""
		|Закрыть обработку?",4,10)<>6 Тогда  
			СтатусВозврата(0);
			Возврат;
		КонецЕсли;
	КонецЕсли; 
	
	ИнициализацияОбработкиРезультатов();	
КонецПроцедуры